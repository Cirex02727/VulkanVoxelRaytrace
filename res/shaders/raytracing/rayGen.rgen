#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#extension GL_EXT_scalar_block_layout : require

// #extension GL_EXT_debug_printf : require

#include "rayShared.shinc"

layout(location = 0) rayPayloadEXT Payload payload;

layout(set = 0, binding = 0) uniform UniformBufferObject
{
    mat4 view;
    mat4 proj;

    mat4 invView;
    mat4 invProj;
} ubo;

layout(set = 1, binding = 0) uniform accelerationStructureEXT as;

layout(set = 1, binding = 1, rgba32f) uniform image2D outImage;

layout(set = 1, binding = 5, scalar) buffer Materials { Material m[]; } materials;

layout(set = 1, binding = 6, rgba32f) uniform image2D accumulateImage;

layout(push_constant) uniform constants {
    float frameCount;
} PushConstants;

float hash(inout vec2 seed)
{
	float v = fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453);
    ++seed.x;
    return v;
}

vec3 random_unit(inout vec2 seed)
{
    return normalize(vec3(hash(seed) * 2.0 - 1.0, hash(seed) * 2.0 - 1.0, hash(seed) * 2.0 - 1.0));
}

void main()
{
    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = uv * 2.0 - 1.0;

    vec3 ro     = (ubo.invView * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
    vec4 target = ubo.invProj * vec4(d, 1.0, 1.0);
    vec3 rd     = (ubo.invView * vec4(normalize(target.xyz / target.w), 0.0)).xyz;
    
    payload.position = vec3(0.0);
    payload.normal = vec3(0.0);
    payload.color = vec4(0.0);
    payload.material = 0;
    
    vec3 light = vec3(0.0);
    vec3 contribution = vec3(1.0);

    vec2 seed = uv + vec2(PushConstants.frameCount);

    // bool debug = all(lessThanEqual(gl_LaunchIDEXT.xy, vec2(0.0)));
    // if(debug)
    //     debugPrintfEXT("Uv: %v2f\n", gl_LaunchIDEXT.xy);
    
    int samples = 0, depth = 0;
    while(samples < 5)
    {
        ++samples;
        
        vec3 rayO = ro;
        vec3 rayD = rd;

        while(depth < 5)
        {
            ++depth;

            traceRayEXT(
                as,                   // acceleration structure
                gl_RayFlagsOpaqueEXT, // rayFlags
                0xff,                 // cullMask
                0,                    // sbtRecordOffset
                0,                    // sbtRecordStride
                0,                    // missIndex
                rayO,                 // ray origin
                0.001,                // ray min range
                rayD,                 // ray direction
                1000.0,               // ray max range
                0                     // payload (location = 0)
            );

            // if(debug)
            //     debugPrintfEXT("Hitted: %d | %v3f | %v3f\n", depth, payload.normal, light);

            // Miss
            if(all(equal(payload.normal, vec3(0.0))))
            {
                vec3 skyLight = vec3(0.18, 0.18, 0.18);
                // light += skyLight * contribution;
                break;
            }

            contribution *= payload.color.xyz;

            vec4 emission = materials.m[payload.material].emission;
            light += emission.xyz * emission.w;

            rayO = payload.position;

            vec3 rnd = random_unit(seed) * 0.001;
            rayD = normalize(payload.normal + rnd); // reflect(rd, payload.normal);
        }
    }
    
    // Accumulate
    ivec2 coord = ivec2(gl_LaunchIDEXT.xy);
    vec3 accumulateColor = imageLoad(accumulateImage, coord).xyz + (light / samples);
    imageStore(accumulateImage, coord, vec4(accumulateColor, 1.0));

    // Gamma correction
    accumulateColor = pow(accumulateColor / PushConstants.frameCount, vec3(1.0 / 2.2));
    imageStore(outImage, coord, vec4(clamp(accumulateColor, vec3(0.0), vec3(1.0)), 1.0));

    // Debug
    // imageStore(outImage, coord, vec4(light, 1.0));

    // PREV
    // Accumulate
    // ivec2 coord = ivec2(gl_LaunchIDEXT.xy);
    // vec3 prevColor = imageLoad(outImage, coord).xyz;

    // light = prevColor + (light / PushConstants.frameCount);
    // light = min(light, vec3(1.0));
    
    // imageStore(outImage, coord, vec4((prevColor + light) / 2.0, 1.0));
    // imageStore(outImage, coord, vec4(light, 1.0));
}
